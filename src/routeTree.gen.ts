/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as HazardsIndexImport } from './routes/hazards/index'
import { Route as HazardsReviewIndexImport } from './routes/hazards-review/index'
import { Route as CcsIndexImport } from './routes/ccs/index'

// Create Virtual Routes

const WetlandsIndexLazyImport = createFileRoute('/wetlands/')()
const MineralsIndexLazyImport = createFileRoute('/minerals/')()
const HazardsReportAoiLazyImport = createFileRoute('/hazards/report/$aoi')()
const HazardsReviewReportNewreportLazyImport = createFileRoute(
  '/hazards-review/report/newreport',
)()
const HazardsReviewReportAoiLazyImport = createFileRoute(
  '/hazards-review/report/$aoi',
)()
const HazardsReportNewreportIndexLazyImport = createFileRoute(
  '/hazards/report/newreport/',
)()

// Create/Update Routes

const WetlandsIndexLazyRoute = WetlandsIndexLazyImport.update({
  id: '/wetlands/',
  path: '/wetlands/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/wetlands/index.lazy').then((d) => d.Route),
)

const MineralsIndexLazyRoute = MineralsIndexLazyImport.update({
  id: '/minerals/',
  path: '/minerals/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/minerals/index.lazy').then((d) => d.Route),
)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const HazardsIndexRoute = HazardsIndexImport.update({
  id: '/hazards/',
  path: '/hazards/',
  getParentRoute: () => rootRoute,
} as any)

const HazardsReviewIndexRoute = HazardsReviewIndexImport.update({
  id: '/hazards-review/',
  path: '/hazards-review/',
  getParentRoute: () => rootRoute,
} as any)

const CcsIndexRoute = CcsIndexImport.update({
  id: '/ccs/',
  path: '/ccs/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ccs/index.lazy').then((d) => d.Route))

const HazardsReportAoiLazyRoute = HazardsReportAoiLazyImport.update({
  id: '/hazards/report/$aoi',
  path: '/hazards/report/$aoi',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/hazards/report/$aoi.lazy').then((d) => d.Route),
)

const HazardsReviewReportNewreportLazyRoute =
  HazardsReviewReportNewreportLazyImport.update({
    id: '/hazards-review/report/newreport',
    path: '/hazards-review/report/newreport',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/hazards-review/report/newreport.lazy').then(
      (d) => d.Route,
    ),
  )

const HazardsReviewReportAoiLazyRoute = HazardsReviewReportAoiLazyImport.update(
  {
    id: '/hazards-review/report/$aoi',
    path: '/hazards-review/report/$aoi',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/hazards-review/report/$aoi.lazy').then((d) => d.Route),
)

const HazardsReportNewreportIndexLazyRoute =
  HazardsReportNewreportIndexLazyImport.update({
    id: '/hazards/report/newreport/',
    path: '/hazards/report/newreport/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/hazards/report/newreport/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ccs/': {
      id: '/ccs/'
      path: '/ccs'
      fullPath: '/ccs'
      preLoaderRoute: typeof CcsIndexImport
      parentRoute: typeof rootRoute
    }
    '/hazards-review/': {
      id: '/hazards-review/'
      path: '/hazards-review'
      fullPath: '/hazards-review'
      preLoaderRoute: typeof HazardsReviewIndexImport
      parentRoute: typeof rootRoute
    }
    '/hazards/': {
      id: '/hazards/'
      path: '/hazards'
      fullPath: '/hazards'
      preLoaderRoute: typeof HazardsIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/minerals/': {
      id: '/minerals/'
      path: '/minerals'
      fullPath: '/minerals'
      preLoaderRoute: typeof MineralsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/wetlands/': {
      id: '/wetlands/'
      path: '/wetlands'
      fullPath: '/wetlands'
      preLoaderRoute: typeof WetlandsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/hazards-review/report/$aoi': {
      id: '/hazards-review/report/$aoi'
      path: '/hazards-review/report/$aoi'
      fullPath: '/hazards-review/report/$aoi'
      preLoaderRoute: typeof HazardsReviewReportAoiLazyImport
      parentRoute: typeof rootRoute
    }
    '/hazards-review/report/newreport': {
      id: '/hazards-review/report/newreport'
      path: '/hazards-review/report/newreport'
      fullPath: '/hazards-review/report/newreport'
      preLoaderRoute: typeof HazardsReviewReportNewreportLazyImport
      parentRoute: typeof rootRoute
    }
    '/hazards/report/$aoi': {
      id: '/hazards/report/$aoi'
      path: '/hazards/report/$aoi'
      fullPath: '/hazards/report/$aoi'
      preLoaderRoute: typeof HazardsReportAoiLazyImport
      parentRoute: typeof rootRoute
    }
    '/hazards/report/newreport/': {
      id: '/hazards/report/newreport/'
      path: '/hazards/report/newreport'
      fullPath: '/hazards/report/newreport'
      preLoaderRoute: typeof HazardsReportNewreportIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/ccs': typeof CcsIndexRoute
  '/hazards-review': typeof HazardsReviewIndexRoute
  '/hazards': typeof HazardsIndexRoute
  '/login': typeof LoginIndexRoute
  '/minerals': typeof MineralsIndexLazyRoute
  '/wetlands': typeof WetlandsIndexLazyRoute
  '/hazards-review/report/$aoi': typeof HazardsReviewReportAoiLazyRoute
  '/hazards-review/report/newreport': typeof HazardsReviewReportNewreportLazyRoute
  '/hazards/report/$aoi': typeof HazardsReportAoiLazyRoute
  '/hazards/report/newreport': typeof HazardsReportNewreportIndexLazyRoute
}

export interface FileRoutesByTo {
  '/ccs': typeof CcsIndexRoute
  '/hazards-review': typeof HazardsReviewIndexRoute
  '/hazards': typeof HazardsIndexRoute
  '/login': typeof LoginIndexRoute
  '/minerals': typeof MineralsIndexLazyRoute
  '/wetlands': typeof WetlandsIndexLazyRoute
  '/hazards-review/report/$aoi': typeof HazardsReviewReportAoiLazyRoute
  '/hazards-review/report/newreport': typeof HazardsReviewReportNewreportLazyRoute
  '/hazards/report/$aoi': typeof HazardsReportAoiLazyRoute
  '/hazards/report/newreport': typeof HazardsReportNewreportIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/ccs/': typeof CcsIndexRoute
  '/hazards-review/': typeof HazardsReviewIndexRoute
  '/hazards/': typeof HazardsIndexRoute
  '/login/': typeof LoginIndexRoute
  '/minerals/': typeof MineralsIndexLazyRoute
  '/wetlands/': typeof WetlandsIndexLazyRoute
  '/hazards-review/report/$aoi': typeof HazardsReviewReportAoiLazyRoute
  '/hazards-review/report/newreport': typeof HazardsReviewReportNewreportLazyRoute
  '/hazards/report/$aoi': typeof HazardsReportAoiLazyRoute
  '/hazards/report/newreport/': typeof HazardsReportNewreportIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/ccs'
    | '/hazards-review'
    | '/hazards'
    | '/login'
    | '/minerals'
    | '/wetlands'
    | '/hazards-review/report/$aoi'
    | '/hazards-review/report/newreport'
    | '/hazards/report/$aoi'
    | '/hazards/report/newreport'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/ccs'
    | '/hazards-review'
    | '/hazards'
    | '/login'
    | '/minerals'
    | '/wetlands'
    | '/hazards-review/report/$aoi'
    | '/hazards-review/report/newreport'
    | '/hazards/report/$aoi'
    | '/hazards/report/newreport'
  id:
    | '__root__'
    | '/ccs/'
    | '/hazards-review/'
    | '/hazards/'
    | '/login/'
    | '/minerals/'
    | '/wetlands/'
    | '/hazards-review/report/$aoi'
    | '/hazards-review/report/newreport'
    | '/hazards/report/$aoi'
    | '/hazards/report/newreport/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  CcsIndexRoute: typeof CcsIndexRoute
  HazardsReviewIndexRoute: typeof HazardsReviewIndexRoute
  HazardsIndexRoute: typeof HazardsIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  MineralsIndexLazyRoute: typeof MineralsIndexLazyRoute
  WetlandsIndexLazyRoute: typeof WetlandsIndexLazyRoute
  HazardsReviewReportAoiLazyRoute: typeof HazardsReviewReportAoiLazyRoute
  HazardsReviewReportNewreportLazyRoute: typeof HazardsReviewReportNewreportLazyRoute
  HazardsReportAoiLazyRoute: typeof HazardsReportAoiLazyRoute
  HazardsReportNewreportIndexLazyRoute: typeof HazardsReportNewreportIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  CcsIndexRoute: CcsIndexRoute,
  HazardsReviewIndexRoute: HazardsReviewIndexRoute,
  HazardsIndexRoute: HazardsIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  MineralsIndexLazyRoute: MineralsIndexLazyRoute,
  WetlandsIndexLazyRoute: WetlandsIndexLazyRoute,
  HazardsReviewReportAoiLazyRoute: HazardsReviewReportAoiLazyRoute,
  HazardsReviewReportNewreportLazyRoute: HazardsReviewReportNewreportLazyRoute,
  HazardsReportAoiLazyRoute: HazardsReportAoiLazyRoute,
  HazardsReportNewreportIndexLazyRoute: HazardsReportNewreportIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/ccs/",
        "/hazards-review/",
        "/hazards/",
        "/login/",
        "/minerals/",
        "/wetlands/",
        "/hazards-review/report/$aoi",
        "/hazards-review/report/newreport",
        "/hazards/report/$aoi",
        "/hazards/report/newreport/"
      ]
    },
    "/ccs/": {
      "filePath": "ccs/index.tsx"
    },
    "/hazards-review/": {
      "filePath": "hazards-review/index.tsx"
    },
    "/hazards/": {
      "filePath": "hazards/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/minerals/": {
      "filePath": "minerals/index.lazy.tsx"
    },
    "/wetlands/": {
      "filePath": "wetlands/index.lazy.tsx"
    },
    "/hazards-review/report/$aoi": {
      "filePath": "hazards-review/report/$aoi.lazy.tsx"
    },
    "/hazards-review/report/newreport": {
      "filePath": "hazards-review/report/newreport.lazy.tsx"
    },
    "/hazards/report/$aoi": {
      "filePath": "hazards/report/$aoi.lazy.tsx"
    },
    "/hazards/report/newreport/": {
      "filePath": "hazards/report/newreport/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
