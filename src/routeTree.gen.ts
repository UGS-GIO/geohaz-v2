/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const HazardMapLazyImport = createFileRoute('/hazard-map')()

// Create/Update Routes

const HazardMapLazyRoute = HazardMapLazyImport.update({
  id: '/hazard-map',
  path: '/hazard-map',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/hazard-map.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/hazard-map': {
      id: '/hazard-map'
      path: '/hazard-map'
      fullPath: '/hazard-map'
      preLoaderRoute: typeof HazardMapLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/hazard-map': typeof HazardMapLazyRoute
}

export interface FileRoutesByTo {
  '/hazard-map': typeof HazardMapLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/hazard-map': typeof HazardMapLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/hazard-map'
  fileRoutesByTo: FileRoutesByTo
  to: '/hazard-map'
  id: '__root__' | '/hazard-map'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  HazardMapLazyRoute: typeof HazardMapLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  HazardMapLazyRoute: HazardMapLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/hazard-map"
      ]
    },
    "/hazard-map": {
      "filePath": "hazard-map.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
