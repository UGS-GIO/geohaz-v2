/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ReportLazyImport = createFileRoute('/report')()
const HazardsLazyImport = createFileRoute('/hazards')()
const CcusLazyImport = createFileRoute('/ccus')()

// Create/Update Routes

const ReportLazyRoute = ReportLazyImport.update({
  id: '/report',
  path: '/report',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/report.lazy').then((d) => d.Route))

const HazardsLazyRoute = HazardsLazyImport.update({
  id: '/hazards',
  path: '/hazards',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/hazards.lazy').then((d) => d.Route))

const CcusLazyRoute = CcusLazyImport.update({
  id: '/ccus',
  path: '/ccus',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ccus.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ccus': {
      id: '/ccus'
      path: '/ccus'
      fullPath: '/ccus'
      preLoaderRoute: typeof CcusLazyImport
      parentRoute: typeof rootRoute
    }
    '/hazards': {
      id: '/hazards'
      path: '/hazards'
      fullPath: '/hazards'
      preLoaderRoute: typeof HazardsLazyImport
      parentRoute: typeof rootRoute
    }
    '/report': {
      id: '/report'
      path: '/report'
      fullPath: '/report'
      preLoaderRoute: typeof ReportLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/ccus': typeof CcusLazyRoute
  '/hazards': typeof HazardsLazyRoute
  '/report': typeof ReportLazyRoute
}

export interface FileRoutesByTo {
  '/ccus': typeof CcusLazyRoute
  '/hazards': typeof HazardsLazyRoute
  '/report': typeof ReportLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/ccus': typeof CcusLazyRoute
  '/hazards': typeof HazardsLazyRoute
  '/report': typeof ReportLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/ccus' | '/hazards' | '/report'
  fileRoutesByTo: FileRoutesByTo
  to: '/ccus' | '/hazards' | '/report'
  id: '__root__' | '/ccus' | '/hazards' | '/report'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  CcusLazyRoute: typeof CcusLazyRoute
  HazardsLazyRoute: typeof HazardsLazyRoute
  ReportLazyRoute: typeof ReportLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  CcusLazyRoute: CcusLazyRoute,
  HazardsLazyRoute: HazardsLazyRoute,
  ReportLazyRoute: ReportLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/ccus",
        "/hazards",
        "/report"
      ]
    },
    "/ccus": {
      "filePath": "ccus.lazy.tsx"
    },
    "/hazards": {
      "filePath": "hazards.lazy.tsx"
    },
    "/report": {
      "filePath": "report.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
