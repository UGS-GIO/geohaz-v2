/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const MineralsIndexLazyImport = createFileRoute('/minerals/')()
const HazardsIndexLazyImport = createFileRoute('/hazards/')()
const CcusIndexLazyImport = createFileRoute('/ccus/')()
const HazardsReportNewreportLazyImport = createFileRoute(
  '/hazards/report/newreport',
)()
const HazardsReportAoiLazyImport = createFileRoute('/hazards/report/$aoi')()
const HazardsReportNewreportIndexLazyImport = createFileRoute(
  '/hazards/report/newreport/',
)()

// Create/Update Routes

const MineralsIndexLazyRoute = MineralsIndexLazyImport.update({
  id: '/minerals/',
  path: '/minerals/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/minerals/index.lazy').then((d) => d.Route),
)

const HazardsIndexLazyRoute = HazardsIndexLazyImport.update({
  id: '/hazards/',
  path: '/hazards/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/hazards/index.lazy').then((d) => d.Route))

const CcusIndexLazyRoute = CcusIndexLazyImport.update({
  id: '/ccus/',
  path: '/ccus/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ccus/index.lazy').then((d) => d.Route))

const HazardsReportNewreportLazyRoute = HazardsReportNewreportLazyImport.update(
  {
    id: '/hazards/report/newreport',
    path: '/hazards/report/newreport',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/hazards/report/newreport.lazy').then((d) => d.Route),
)

const HazardsReportAoiLazyRoute = HazardsReportAoiLazyImport.update({
  id: '/hazards/report/$aoi',
  path: '/hazards/report/$aoi',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/hazards/report/$aoi.lazy').then((d) => d.Route),
)

const HazardsReportNewreportIndexLazyRoute =
  HazardsReportNewreportIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => HazardsReportNewreportLazyRoute,
  } as any).lazy(() =>
    import('./routes/hazards/report/newreport/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ccus/': {
      id: '/ccus/'
      path: '/ccus'
      fullPath: '/ccus'
      preLoaderRoute: typeof CcusIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/hazards/': {
      id: '/hazards/'
      path: '/hazards'
      fullPath: '/hazards'
      preLoaderRoute: typeof HazardsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/minerals/': {
      id: '/minerals/'
      path: '/minerals'
      fullPath: '/minerals'
      preLoaderRoute: typeof MineralsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/hazards/report/$aoi': {
      id: '/hazards/report/$aoi'
      path: '/hazards/report/$aoi'
      fullPath: '/hazards/report/$aoi'
      preLoaderRoute: typeof HazardsReportAoiLazyImport
      parentRoute: typeof rootRoute
    }
    '/hazards/report/newreport': {
      id: '/hazards/report/newreport'
      path: '/hazards/report/newreport'
      fullPath: '/hazards/report/newreport'
      preLoaderRoute: typeof HazardsReportNewreportLazyImport
      parentRoute: typeof rootRoute
    }
    '/hazards/report/newreport/': {
      id: '/hazards/report/newreport/'
      path: '/'
      fullPath: '/hazards/report/newreport/'
      preLoaderRoute: typeof HazardsReportNewreportIndexLazyImport
      parentRoute: typeof HazardsReportNewreportLazyImport
    }
  }
}

// Create and export the route tree

interface HazardsReportNewreportLazyRouteChildren {
  HazardsReportNewreportIndexLazyRoute: typeof HazardsReportNewreportIndexLazyRoute
}

const HazardsReportNewreportLazyRouteChildren: HazardsReportNewreportLazyRouteChildren =
  {
    HazardsReportNewreportIndexLazyRoute: HazardsReportNewreportIndexLazyRoute,
  }

const HazardsReportNewreportLazyRouteWithChildren =
  HazardsReportNewreportLazyRoute._addFileChildren(
    HazardsReportNewreportLazyRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/ccus': typeof CcusIndexLazyRoute
  '/hazards': typeof HazardsIndexLazyRoute
  '/minerals': typeof MineralsIndexLazyRoute
  '/hazards/report/$aoi': typeof HazardsReportAoiLazyRoute
  '/hazards/report/newreport': typeof HazardsReportNewreportLazyRouteWithChildren
  '/hazards/report/newreport/': typeof HazardsReportNewreportIndexLazyRoute
}

export interface FileRoutesByTo {
  '/ccus': typeof CcusIndexLazyRoute
  '/hazards': typeof HazardsIndexLazyRoute
  '/minerals': typeof MineralsIndexLazyRoute
  '/hazards/report/$aoi': typeof HazardsReportAoiLazyRoute
  '/hazards/report/newreport': typeof HazardsReportNewreportIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/ccus/': typeof CcusIndexLazyRoute
  '/hazards/': typeof HazardsIndexLazyRoute
  '/minerals/': typeof MineralsIndexLazyRoute
  '/hazards/report/$aoi': typeof HazardsReportAoiLazyRoute
  '/hazards/report/newreport': typeof HazardsReportNewreportLazyRouteWithChildren
  '/hazards/report/newreport/': typeof HazardsReportNewreportIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/ccus'
    | '/hazards'
    | '/minerals'
    | '/hazards/report/$aoi'
    | '/hazards/report/newreport'
    | '/hazards/report/newreport/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/ccus'
    | '/hazards'
    | '/minerals'
    | '/hazards/report/$aoi'
    | '/hazards/report/newreport'
  id:
    | '__root__'
    | '/ccus/'
    | '/hazards/'
    | '/minerals/'
    | '/hazards/report/$aoi'
    | '/hazards/report/newreport'
    | '/hazards/report/newreport/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  CcusIndexLazyRoute: typeof CcusIndexLazyRoute
  HazardsIndexLazyRoute: typeof HazardsIndexLazyRoute
  MineralsIndexLazyRoute: typeof MineralsIndexLazyRoute
  HazardsReportAoiLazyRoute: typeof HazardsReportAoiLazyRoute
  HazardsReportNewreportLazyRoute: typeof HazardsReportNewreportLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  CcusIndexLazyRoute: CcusIndexLazyRoute,
  HazardsIndexLazyRoute: HazardsIndexLazyRoute,
  MineralsIndexLazyRoute: MineralsIndexLazyRoute,
  HazardsReportAoiLazyRoute: HazardsReportAoiLazyRoute,
  HazardsReportNewreportLazyRoute: HazardsReportNewreportLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/ccus/",
        "/hazards/",
        "/minerals/",
        "/hazards/report/$aoi",
        "/hazards/report/newreport"
      ]
    },
    "/ccus/": {
      "filePath": "ccus/index.lazy.tsx"
    },
    "/hazards/": {
      "filePath": "hazards/index.lazy.tsx"
    },
    "/minerals/": {
      "filePath": "minerals/index.lazy.tsx"
    },
    "/hazards/report/$aoi": {
      "filePath": "hazards/report/$aoi.lazy.tsx"
    },
    "/hazards/report/newreport": {
      "filePath": "hazards/report/newreport.lazy.tsx",
      "children": [
        "/hazards/report/newreport/"
      ]
    },
    "/hazards/report/newreport/": {
      "filePath": "hazards/report/newreport/index.lazy.tsx",
      "parent": "/hazards/report/newreport"
    }
  }
}
ROUTE_MANIFEST_END */
