/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ReportRouteImport } from './routes/_report'
import { Route as MapRouteImport } from './routes/_map'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as MapHazardsReviewRouteRouteImport } from './routes/_map/hazards-review/route'

const MapWetlandsIndexLazyRouteImport = createFileRoute('/_map/wetlands/')()
const MapWetlandplantsIndexLazyRouteImport = createFileRoute(
  '/_map/wetlandplants/',
)()
const MapMineralsIndexLazyRouteImport = createFileRoute('/_map/minerals/')()
const MapHazardsIndexLazyRouteImport = createFileRoute('/_map/hazards/')()
const MapHazardsReviewIndexLazyRouteImport = createFileRoute(
  '/_map/hazards-review/',
)()
const MapGeophysicsIndexLazyRouteImport = createFileRoute('/_map/geophysics/')()
const MapCarbonstorageIndexLazyRouteImport = createFileRoute(
  '/_map/carbonstorage/',
)()
const ReportHazardsReportAoiLazyRouteImport = createFileRoute(
  '/_report/hazards/report/$aoi',
)()

const ReportRoute = ReportRouteImport.update({
  id: '/_report',
  getParentRoute: () => rootRouteImport,
} as any)
const MapRoute = MapRouteImport.update({
  id: '/_map',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const MapHazardsReviewRouteRoute = MapHazardsReviewRouteRouteImport.update({
  id: '/hazards-review',
  path: '/hazards-review',
  getParentRoute: () => MapRoute,
} as any)
const MapWetlandsIndexLazyRoute = MapWetlandsIndexLazyRouteImport.update({
  id: '/wetlands/',
  path: '/wetlands/',
  getParentRoute: () => MapRoute,
} as any).lazy(() =>
  import('./routes/_map/wetlands/index.lazy').then((d) => d.Route),
)
const MapWetlandplantsIndexLazyRoute =
  MapWetlandplantsIndexLazyRouteImport.update({
    id: '/wetlandplants/',
    path: '/wetlandplants/',
    getParentRoute: () => MapRoute,
  } as any).lazy(() =>
    import('./routes/_map/wetlandplants/index.lazy').then((d) => d.Route),
  )
const MapMineralsIndexLazyRoute = MapMineralsIndexLazyRouteImport.update({
  id: '/minerals/',
  path: '/minerals/',
  getParentRoute: () => MapRoute,
} as any).lazy(() =>
  import('./routes/_map/minerals/index.lazy').then((d) => d.Route),
)
const MapHazardsIndexLazyRoute = MapHazardsIndexLazyRouteImport.update({
  id: '/hazards/',
  path: '/hazards/',
  getParentRoute: () => MapRoute,
} as any).lazy(() =>
  import('./routes/_map/hazards/index.lazy').then((d) => d.Route),
)
const MapHazardsReviewIndexLazyRoute =
  MapHazardsReviewIndexLazyRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => MapHazardsReviewRouteRoute,
  } as any).lazy(() =>
    import('./routes/_map/hazards-review/index.lazy').then((d) => d.Route),
  )
const MapGeophysicsIndexLazyRoute = MapGeophysicsIndexLazyRouteImport.update({
  id: '/geophysics/',
  path: '/geophysics/',
  getParentRoute: () => MapRoute,
} as any).lazy(() =>
  import('./routes/_map/geophysics/index.lazy').then((d) => d.Route),
)
const MapCarbonstorageIndexLazyRoute =
  MapCarbonstorageIndexLazyRouteImport.update({
    id: '/carbonstorage/',
    path: '/carbonstorage/',
    getParentRoute: () => MapRoute,
  } as any).lazy(() =>
    import('./routes/_map/carbonstorage/index.lazy').then((d) => d.Route),
  )
const ReportHazardsReportAoiLazyRoute =
  ReportHazardsReportAoiLazyRouteImport.update({
    id: '/hazards/report/$aoi',
    path: '/hazards/report/$aoi',
    getParentRoute: () => ReportRoute,
  } as any).lazy(() =>
    import('./routes/_report/hazards.report.$aoi.lazy').then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/hazards-review': typeof MapHazardsReviewRouteRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/carbonstorage': typeof MapCarbonstorageIndexLazyRoute
  '/geophysics': typeof MapGeophysicsIndexLazyRoute
  '/hazards-review/': typeof MapHazardsReviewIndexLazyRoute
  '/hazards': typeof MapHazardsIndexLazyRoute
  '/minerals': typeof MapMineralsIndexLazyRoute
  '/wetlandplants': typeof MapWetlandplantsIndexLazyRoute
  '/wetlands': typeof MapWetlandsIndexLazyRoute
  '/hazards/report/$aoi': typeof ReportHazardsReportAoiLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof AuthLoginRoute
  '/carbonstorage': typeof MapCarbonstorageIndexLazyRoute
  '/geophysics': typeof MapGeophysicsIndexLazyRoute
  '/hazards-review': typeof MapHazardsReviewIndexLazyRoute
  '/hazards': typeof MapHazardsIndexLazyRoute
  '/minerals': typeof MapMineralsIndexLazyRoute
  '/wetlandplants': typeof MapWetlandplantsIndexLazyRoute
  '/wetlands': typeof MapWetlandsIndexLazyRoute
  '/hazards/report/$aoi': typeof ReportHazardsReportAoiLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_map': typeof MapRouteWithChildren
  '/_report': typeof ReportRouteWithChildren
  '/_map/hazards-review': typeof MapHazardsReviewRouteRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_map/carbonstorage/': typeof MapCarbonstorageIndexLazyRoute
  '/_map/geophysics/': typeof MapGeophysicsIndexLazyRoute
  '/_map/hazards-review/': typeof MapHazardsReviewIndexLazyRoute
  '/_map/hazards/': typeof MapHazardsIndexLazyRoute
  '/_map/minerals/': typeof MapMineralsIndexLazyRoute
  '/_map/wetlandplants/': typeof MapWetlandplantsIndexLazyRoute
  '/_map/wetlands/': typeof MapWetlandsIndexLazyRoute
  '/_report/hazards/report/$aoi': typeof ReportHazardsReportAoiLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/hazards-review'
    | '/login'
    | '/carbonstorage'
    | '/geophysics'
    | '/hazards-review/'
    | '/hazards'
    | '/minerals'
    | '/wetlandplants'
    | '/wetlands'
    | '/hazards/report/$aoi'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/carbonstorage'
    | '/geophysics'
    | '/hazards-review'
    | '/hazards'
    | '/minerals'
    | '/wetlandplants'
    | '/wetlands'
    | '/hazards/report/$aoi'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_map'
    | '/_report'
    | '/_map/hazards-review'
    | '/_auth/login'
    | '/_map/carbonstorage/'
    | '/_map/geophysics/'
    | '/_map/hazards-review/'
    | '/_map/hazards/'
    | '/_map/minerals/'
    | '/_map/wetlandplants/'
    | '/_map/wetlands/'
    | '/_report/hazards/report/$aoi'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  MapRoute: typeof MapRouteWithChildren
  ReportRoute: typeof ReportRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_report': {
      id: '/_report'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ReportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_map': {
      id: '/_map'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_map/hazards-review': {
      id: '/_map/hazards-review'
      path: '/hazards-review'
      fullPath: '/hazards-review'
      preLoaderRoute: typeof MapHazardsReviewRouteRouteImport
      parentRoute: typeof MapRoute
    }
    '/_map/wetlands/': {
      id: '/_map/wetlands/'
      path: '/wetlands'
      fullPath: '/wetlands'
      preLoaderRoute: typeof MapWetlandsIndexLazyRouteImport
      parentRoute: typeof MapRoute
    }
    '/_map/wetlandplants/': {
      id: '/_map/wetlandplants/'
      path: '/wetlandplants'
      fullPath: '/wetlandplants'
      preLoaderRoute: typeof MapWetlandplantsIndexLazyRouteImport
      parentRoute: typeof MapRoute
    }
    '/_map/minerals/': {
      id: '/_map/minerals/'
      path: '/minerals'
      fullPath: '/minerals'
      preLoaderRoute: typeof MapMineralsIndexLazyRouteImport
      parentRoute: typeof MapRoute
    }
    '/_map/hazards/': {
      id: '/_map/hazards/'
      path: '/hazards'
      fullPath: '/hazards'
      preLoaderRoute: typeof MapHazardsIndexLazyRouteImport
      parentRoute: typeof MapRoute
    }
    '/_map/hazards-review/': {
      id: '/_map/hazards-review/'
      path: '/'
      fullPath: '/hazards-review/'
      preLoaderRoute: typeof MapHazardsReviewIndexLazyRouteImport
      parentRoute: typeof MapHazardsReviewRouteRoute
    }
    '/_map/geophysics/': {
      id: '/_map/geophysics/'
      path: '/geophysics'
      fullPath: '/geophysics'
      preLoaderRoute: typeof MapGeophysicsIndexLazyRouteImport
      parentRoute: typeof MapRoute
    }
    '/_map/carbonstorage/': {
      id: '/_map/carbonstorage/'
      path: '/carbonstorage'
      fullPath: '/carbonstorage'
      preLoaderRoute: typeof MapCarbonstorageIndexLazyRouteImport
      parentRoute: typeof MapRoute
    }
    '/_report/hazards/report/$aoi': {
      id: '/_report/hazards/report/$aoi'
      path: '/hazards/report/$aoi'
      fullPath: '/hazards/report/$aoi'
      preLoaderRoute: typeof ReportHazardsReportAoiLazyRouteImport
      parentRoute: typeof ReportRoute
    }
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface MapHazardsReviewRouteRouteChildren {
  MapHazardsReviewIndexLazyRoute: typeof MapHazardsReviewIndexLazyRoute
}

const MapHazardsReviewRouteRouteChildren: MapHazardsReviewRouteRouteChildren = {
  MapHazardsReviewIndexLazyRoute: MapHazardsReviewIndexLazyRoute,
}

const MapHazardsReviewRouteRouteWithChildren =
  MapHazardsReviewRouteRoute._addFileChildren(
    MapHazardsReviewRouteRouteChildren,
  )

interface MapRouteChildren {
  MapHazardsReviewRouteRoute: typeof MapHazardsReviewRouteRouteWithChildren
  MapCarbonstorageIndexLazyRoute: typeof MapCarbonstorageIndexLazyRoute
  MapGeophysicsIndexLazyRoute: typeof MapGeophysicsIndexLazyRoute
  MapHazardsIndexLazyRoute: typeof MapHazardsIndexLazyRoute
  MapMineralsIndexLazyRoute: typeof MapMineralsIndexLazyRoute
  MapWetlandplantsIndexLazyRoute: typeof MapWetlandplantsIndexLazyRoute
  MapWetlandsIndexLazyRoute: typeof MapWetlandsIndexLazyRoute
}

const MapRouteChildren: MapRouteChildren = {
  MapHazardsReviewRouteRoute: MapHazardsReviewRouteRouteWithChildren,
  MapCarbonstorageIndexLazyRoute: MapCarbonstorageIndexLazyRoute,
  MapGeophysicsIndexLazyRoute: MapGeophysicsIndexLazyRoute,
  MapHazardsIndexLazyRoute: MapHazardsIndexLazyRoute,
  MapMineralsIndexLazyRoute: MapMineralsIndexLazyRoute,
  MapWetlandplantsIndexLazyRoute: MapWetlandplantsIndexLazyRoute,
  MapWetlandsIndexLazyRoute: MapWetlandsIndexLazyRoute,
}

const MapRouteWithChildren = MapRoute._addFileChildren(MapRouteChildren)

interface ReportRouteChildren {
  ReportHazardsReportAoiLazyRoute: typeof ReportHazardsReportAoiLazyRoute
}

const ReportRouteChildren: ReportRouteChildren = {
  ReportHazardsReportAoiLazyRoute: ReportHazardsReportAoiLazyRoute,
}

const ReportRouteWithChildren =
  ReportRoute._addFileChildren(ReportRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  MapRoute: MapRouteWithChildren,
  ReportRoute: ReportRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
